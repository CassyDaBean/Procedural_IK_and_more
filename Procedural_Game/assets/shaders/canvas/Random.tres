[gd_resource type="ShaderMaterial" load_steps=18 format=2]

[sub_resource type="OpenSimplexNoise" id=1]
octaves = 9
period = 65.3
persistence = 0.434
lacunarity = 0.44

[sub_resource type="NoiseTexture" id=2]
seamless = true
as_normalmap = true
bump_strength = 35.0
noise = SubResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=3]
output_port_for_preview = 0
texture = SubResource( 2 )
texture_type = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=4]

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=18]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeColorUniform" id=7]
uniform_name = "ColorUniform"

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
output_port_for_preview = 0
uniform_name = "Test"

[sub_resource type="Gradient" id=9]

[sub_resource type="GradientTexture" id=10]
gradient = SubResource( 9 )

[sub_resource type="VisualShaderNodeTexture" id=11]
output_port_for_preview = 0
source = 5
texture = SubResource( 10 )

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShader" id=17]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_10 : hint_normal;



void vertex() {
// Output:0

}

void fragment() {
// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = vec4(0.0);
	}

// VectorDecompose:12
	vec3 n_in12p0 = vec3(0.00000, 0.00000, 0.00000);
	float n_out12p0 = n_in12p0.x;
	float n_out12p1 = n_in12p0.y;
	float n_out12p2 = n_in12p0.z;

// ScalarOp:13
	float n_in13p1 = 0.00000;
	float n_out13p0 = n_out12p1 - n_in13p1;

// VectorCompose:11
	float n_in11p2 = 0.00000;
	vec3 n_out11p0 = vec3(n_out12p0, n_out13p0, n_in11p2);

// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, n_out11p0.xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// VectorOp:14
	vec3 n_out14p0 = mod(n_out4p0, n_out10p0);

// Output:0
	ALBEDO = n_out14p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -649.584, -18.5701 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( 40, 0 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -220, -240 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( -420, 100 )
nodes/fragment/5/node = SubResource( 12 )
nodes/fragment/5/position = Vector2( -800, 260 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( -880, 140 )
nodes/fragment/7/node = SubResource( 14 )
nodes/fragment/7/position = Vector2( -920, 460 )
nodes/fragment/8/node = SubResource( 15 )
nodes/fragment/8/position = Vector2( -700, 540 )
nodes/fragment/10/node = SubResource( 3 )
nodes/fragment/10/position = Vector2( -80, 260 )
nodes/fragment/11/node = SubResource( 4 )
nodes/fragment/11/position = Vector2( -280, 380 )
nodes/fragment/12/node = SubResource( 5 )
nodes/fragment/12/position = Vector2( -640, 340 )
nodes/fragment/13/node = SubResource( 6 )
nodes/fragment/13/position = Vector2( -440, 440 )
nodes/fragment/14/node = SubResource( 18 )
nodes/fragment/14/position = Vector2( 40, 120 )
nodes/fragment/connections = PoolIntArray( 11, 0, 10, 0, 12, 1, 13, 0, 13, 0, 11, 1, 12, 0, 11, 0, 10, 0, 14, 1, 4, 0, 14, 0, 14, 0, 0, 0 )

[resource]
shader = SubResource( 17 )
