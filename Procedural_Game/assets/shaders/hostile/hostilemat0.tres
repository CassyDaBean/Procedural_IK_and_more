[gd_resource type="ShaderMaterial" load_steps=47 format=2]

[ext_resource path="res://assets/textures/env/liquid0.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
operator = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=3]

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
output_port_for_preview = 0
function = 2

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=7]
output_port_for_preview = 0
operator = 10

[sub_resource type="VisualShaderNodeVectorFunc" id=8]
output_port_for_preview = 0
function = 5

[sub_resource type="VisualShaderNodeColorUniform" id=9]
uniform_name = "BaseColor"

[sub_resource type="VisualShaderNodeTextureUniform" id=10]
uniform_name = "TextureUniform"
texture_type = 1

[sub_resource type="OpenSimplexNoise" id=11]
seed = 20
octaves = 9
period = 51.9
persistence = 0.653
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=12]
seamless = true
noise = SubResource( 11 )

[sub_resource type="VisualShaderNodeTexture" id=13]
output_port_for_preview = 0
texture = SubResource( 12 )
texture_type = 1

[sub_resource type="VisualShaderNodeVectorFunc" id=14]
output_port_for_preview = 0
function = 20

[sub_resource type="VisualShaderNodeVectorOp" id=15]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=18]
input_name = "uv"

[sub_resource type="OpenSimplexNoise" id=19]
seed = 93
octaves = 9
period = 94.2
persistence = 0.115
lacunarity = 0.1

[sub_resource type="NoiseTexture" id=20]
seamless = true
as_normalmap = true
bump_strength = 12.4
noise = SubResource( 19 )

[sub_resource type="VisualShaderNodeTexture" id=21]
texture = SubResource( 20 )
texture_type = 2

[sub_resource type="VisualShaderNodeVectorOp" id=22]
operator = 3

[sub_resource type="VisualShaderNodeVectorCompose" id=23]

[sub_resource type="VisualShaderNodeVectorDecompose" id=24]

[sub_resource type="VisualShaderNodeInput" id=25]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=26]

[sub_resource type="VisualShaderNodeVectorCompose" id=27]

[sub_resource type="VisualShaderNodeVectorDecompose" id=28]

[sub_resource type="VisualShaderNodeVectorCompose" id=29]

[sub_resource type="VisualShaderNodeVectorDecompose" id=30]

[sub_resource type="VisualShaderNodeScalarOp" id=31]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=32]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=33]
function = 1

[sub_resource type="VisualShaderNodeVectorOp" id=34]
operator = 2

[sub_resource type="OpenSimplexNoise" id=35]
octaves = 9
period = 47.4
persistence = 0.896
lacunarity = 1.55

[sub_resource type="NoiseTexture" id=36]
seamless = true
as_normalmap = true
bump_strength = 9.8
noise = SubResource( 35 )

[sub_resource type="VisualShaderNodeTexture" id=37]
texture = SubResource( 36 )
texture_type = 2

[sub_resource type="VisualShaderNodeScalarOp" id=38]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=39]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=40]
default_input_values = [ 0, Vector3( 1.5, 1.5, 1.5 ), 1, Vector3( 1.5, 1.5, 1.5 ) ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=41]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=42]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=43]
input_name = "binormal"

[sub_resource type="VisualShaderNodeInput" id=44]
input_name = "point_size"

[sub_resource type="VisualShader" id=45]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_vtx_26 : hint_normal;
uniform vec4 BaseColor : hint_color;
uniform sampler2D tex_frg_4 : hint_albedo;
uniform sampler2D TextureUniform : hint_albedo;



void vertex() {
// Input:3
	vec3 n_out3p0 = VERTEX;

// VectorDecompose:19
	float n_out19p0 = n_out3p0.x;
	float n_out19p1 = n_out3p0.y;
	float n_out19p2 = n_out3p0.z;

// Input:14
	float n_out14p0 = TIME;

// VectorDecompose:13
	float n_out13p0 = n_out3p0.x;
	float n_out13p1 = n_out3p0.y;
	float n_out13p2 = n_out3p0.z;

// ScalarOp:15
	float n_out15p0 = n_out14p0 + n_out13p0;

// VectorCompose:12
	vec3 n_out12p0 = vec3(n_out15p0, n_out13p1, n_out13p2);

// Input:9
	float n_out9p0 = POINT_SIZE;

// ScalarFunc:22
	float n_out22p0 = cos(n_out9p0);

// Texture:26
	vec4 tex_vtx_26_read = textureLod(tex_vtx_26, n_out12p0.xy, n_out22p0);
	vec3 n_out26p0 = tex_vtx_26_read.rgb;
	float n_out26p1 = tex_vtx_26_read.a;

// ScalarOp:27
	float n_out27p0 = n_out19p0 / dot(n_out26p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:28
	float n_out28p0 = n_out19p1 / dot(n_out26p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:20
	float n_out20p0 = n_out19p2 / dot(n_out26p0, vec3(0.333333, 0.333333, 0.333333));

// VectorCompose:18
	vec3 n_out18p0 = vec3(n_out27p0, n_out28p0, n_out20p0);

// VectorOp:29
	vec3 n_in29p1 = vec3(1.50000, 1.50000, 1.50000);
	vec3 n_out29p0 = n_out18p0 / n_in29p1;

// Output:0
	VERTEX = n_out29p0;

}

void fragment() {
// ColorUniform:2
	vec3 n_out2p0 = BaseColor.rgb;
	float n_out2p1 = BaseColor.a;

// Input:8
	vec3 n_out8p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:11
	float n_out11p0 = n_out8p0.x;
	float n_out11p1 = n_out8p0.y;
	float n_out11p2 = n_out8p0.z;

// Input:7
	float n_out7p0 = TIME;

// ScalarOp:10
	float n_out10p0 = n_out11p0 - n_out7p0;

// Input:9
	vec3 n_out9p0 = vec3(UV, 0.0);

// VectorDecompose:13
	float n_out13p0 = n_out9p0.x;
	float n_out13p1 = n_out9p0.y;
	float n_out13p2 = n_out9p0.z;

// ScalarOp:15
	float n_out15p0 = n_out13p1 * n_out11p1;

// VectorCompose:12
	vec3 n_out12p0 = vec3(n_out10p0, n_out15p0, n_out11p2);

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out12p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// VectorFunc:5
	vec3 n_out5p0 = fract(n_out4p0);

// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// VectorOp:6
	vec3 n_out6p0 = n_out5p0 + n_out3p0;

// VectorOp:16
	vec3 n_out16p0 = reflect(n_out6p0, n_out2p0);

// VectorFunc:17
	vec3 n_out17p0;
	{
		vec3 c = n_out16p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out17p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	ALBEDO = n_out2p0;
	METALLIC = dot(n_out17p0, vec3(0.333333, 0.333333, 0.333333));
	ROUGHNESS = dot(n_out17p0, vec3(0.333333, 0.333333, 0.333333));
	NORMAL = n_out17p0;
	NORMALMAP = n_out17p0;
	NORMALMAP_DEPTH = dot(n_out17p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 69.3699, 33.7404 )
nodes/vertex/0/position = Vector2( 640, -260 )
nodes/vertex/3/node = SubResource( 41 )
nodes/vertex/3/position = Vector2( -580, 80 )
nodes/vertex/7/node = SubResource( 42 )
nodes/vertex/7/position = Vector2( -1100, -80 )
nodes/vertex/8/node = SubResource( 43 )
nodes/vertex/8/position = Vector2( -1140, 60 )
nodes/vertex/9/node = SubResource( 44 )
nodes/vertex/9/position = Vector2( -680, 180 )
nodes/vertex/10/node = SubResource( 21 )
nodes/vertex/10/position = Vector2( -500, -360 )
nodes/vertex/11/node = SubResource( 22 )
nodes/vertex/11/position = Vector2( 240, -200 )
nodes/vertex/12/node = SubResource( 23 )
nodes/vertex/12/position = Vector2( -480, -120 )
nodes/vertex/13/node = SubResource( 24 )
nodes/vertex/13/position = Vector2( -920, -120 )
nodes/vertex/14/node = SubResource( 25 )
nodes/vertex/14/position = Vector2( -880, 160 )
nodes/vertex/15/node = SubResource( 26 )
nodes/vertex/15/position = Vector2( -680, -20 )
nodes/vertex/16/node = SubResource( 27 )
nodes/vertex/16/position = Vector2( -40, -320 )
nodes/vertex/17/node = SubResource( 28 )
nodes/vertex/17/position = Vector2( -260, -340 )
nodes/vertex/18/node = SubResource( 29 )
nodes/vertex/18/position = Vector2( 280, 40 )
nodes/vertex/19/node = SubResource( 30 )
nodes/vertex/19/position = Vector2( -240, -60 )
nodes/vertex/20/node = SubResource( 31 )
nodes/vertex/20/position = Vector2( 80, 220 )
nodes/vertex/21/node = SubResource( 32 )
nodes/vertex/21/position = Vector2( -460, 220 )
nodes/vertex/22/node = SubResource( 33 )
nodes/vertex/22/position = Vector2( -400, 160 )
nodes/vertex/25/node = SubResource( 34 )
nodes/vertex/25/position = Vector2( 300, 160 )
nodes/vertex/26/node = SubResource( 37 )
nodes/vertex/26/position = Vector2( -220, 80 )
nodes/vertex/27/node = SubResource( 38 )
nodes/vertex/27/position = Vector2( 80, -40 )
nodes/vertex/28/node = SubResource( 39 )
nodes/vertex/28/position = Vector2( 80, 80 )
nodes/vertex/29/node = SubResource( 40 )
nodes/vertex/29/position = Vector2( 420, -240 )
nodes/vertex/connections = PoolIntArray( 13, 0, 15, 1, 12, 0, 10, 0, 14, 0, 15, 0, 10, 0, 17, 0, 15, 0, 12, 0, 13, 1, 12, 1, 13, 2, 12, 2, 17, 2, 16, 2, 18, 0, 11, 1, 20, 0, 18, 2, 9, 0, 22, 0, 19, 2, 20, 0, 26, 0, 20, 1, 19, 0, 27, 0, 27, 0, 18, 0, 19, 1, 28, 0, 26, 0, 28, 1, 28, 0, 18, 1, 26, 0, 27, 1, 29, 0, 0, 0, 18, 0, 29, 0, 3, 0, 19, 0, 22, 0, 26, 1, 12, 0, 26, 0, 3, 0, 13, 0 )
nodes/fragment/0/position = Vector2( 760, 60 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -40, 340 )
nodes/fragment/3/node = SubResource( 10 )
nodes/fragment/3/position = Vector2( -260, 180 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( -260, -220 )
nodes/fragment/5/node = SubResource( 14 )
nodes/fragment/5/position = Vector2( -40, -60 )
nodes/fragment/6/node = SubResource( 15 )
nodes/fragment/6/position = Vector2( 20, 120 )
nodes/fragment/7/node = SubResource( 16 )
nodes/fragment/7/position = Vector2( -1260, 120 )
nodes/fragment/8/node = SubResource( 17 )
nodes/fragment/8/position = Vector2( -1240, -140 )
nodes/fragment/9/node = SubResource( 18 )
nodes/fragment/9/position = Vector2( -1280, 0 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -720, -60 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1020, -180 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -520, -140 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -1060, -40 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -1020, 120 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -680, 120 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 260, 220 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 440, 320 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 3, 0, 6, 1, 5, 0, 6, 0, 8, 0, 11, 0, 11, 2, 12, 2, 10, 0, 12, 0, 12, 0, 4, 0, 9, 0, 13, 0, 11, 0, 10, 0, 7, 0, 14, 0, 11, 1, 15, 1, 15, 0, 12, 1, 13, 1, 15, 0, 6, 0, 16, 0, 2, 0, 16, 1, 7, 0, 10, 1, 2, 0, 0, 0, 16, 0, 17, 0, 17, 0, 0, 7, 17, 0, 0, 8, 17, 0, 0, 9, 17, 0, 0, 3, 17, 0, 0, 2 )

[resource]
shader = SubResource( 45 )
shader_param/BaseColor = Color( 0.0509804, 0.0509804, 0.180392, 1 )
shader_param/TextureUniform = ExtResource( 1 )
